Quest:-
mvc
middleware and types
dotenv
bcrypt
ui(daisyui, shadcn)


devDependencies
cors
cookieparser
express
express-rate-limit
mongoose
redis
message queue(bull mq, etc)
generator
currying
throttling
debouncing
event loop
temporal deadzone
hoisting
call stack
clusture
pm2
react-window
framer motion
testing library
load testing library
system design
socket io with react
closure
promises
type coehercion
event propogation
event bubbling
truthy falsy 
db(mysql, mongodb)
docker
typescript
tailwindcss
global state( RTK, context api, zustand)
graphql
multer
next
react
node
short circuiting:
message queue
graphql
react-window
react-scripts
@apollo/server
@apollo/client
children type in tsc
event type in tsc
npx vs npm



Note:

> While creating custom js file we have to use .js while importing in node js
for example: import authTest from "../controllers/auth.controller.js";
> IN Mongodb - while working with collections, name is auto converted to plural by mongoose, we can skip it using.
const User = mongoose.model("User", userSchema, "User"); 
> { timestamps: true } automatically adds the createdAt updatedAt fields in collection data.
> 



======================================================

======================================================

======================================================

======================================================

======================================================

======================================================

======================================================

Environment variables must start with VITE_ than we can access them.

console.log(import.meta.env.VITE_PORT);

======================================================
--------: install daisy ui with vite :---------

1. npm create vite@latest

2. npm install tailwindcss@latest @tailwindcss/vite@latest daisyui@latest

3. remove code from index.css and app.css

4. add following code in index.css

@import "tailwindcss";
@plugin "daisyui";

5. replace code in app.tsx

<div>
  <div className="flex space-x-4 mt-4 flex-col">
    <a href="#" className="hover:text-white">
      <i className="fab fa-facebook-f"></i>Facebook
    </a>
    <a href="#" className="hover:text-white">
      <i className="fab fa-twitter"></i>Facebook
    </a>
  </div>
</div>

6. verify ui

======================================================

todo:

convert mfa directory into single command:


----------: zip file details :------------

graphql using graphql node library:-

graphql-tut.zip



graphql using express-graphql :-

project-mgmt-graphql-main.zip:



daisy ui chat application:-

fullstack-chat-app-master.zip


----------: zip file details :------------


======================================================
sudo yarn -v

npm install --global yarn

sudo yarn install  


Install all from package.json → yarn install
Install new → yarn add package
Install dev → yarn add package --dev
Remove package → yarn remove package

yarn build
======================================================


Install all deps
npm install  or npm i


Add new dep
npm install package


Add dev dep
npm install package --save-dev


Remove dep
npm uninstall package or npm rm)

npm run dev
npm run build


============================================


lsof -i :3000

kill -9 <PID>

============================================

for accessing environment variables from .env file in node js.

require("dotenv").config();

console.log(process.env.PORT);


============================================


b.js

let data1 = {
    asdf1:"asdf",
    asdf2:"asdf2"
};
let data2 = {
    asdf1:"2asdf",
    asdf2:"2asdf2"
};
exports.data = data1;
module.exports = {
    data2:data2
}


a.js

const a = require("./b.js")
console.log(a);
console.log(a.data2);


{ data2: { asdf1: '2asdf', asdf2: '2asdf2' } }
{ asdf1: '2asdf', asdf2: '2asdf2' }



module.exports = {} → Replaces the entire export object.

exports.data = {} → Adds a property called data to the exports object.


=====> Nodemon
Auto restart when change in required file.

npm install -g nodemon


npm install --save-dev nodemon
//Adds nodemon to your project's devDependencies.

run the file:

nodemon server.js


This file contains the configuration for the affected files.
nodemon.json
{
  "watch": ["server.js","index.js","express.js","./express/express.js"],
  "ext": "js json",
  "ignore": ["node_modules"],
  "exec": "node server.js"
}


=====> Middleware



=====> CORS:-

suppose your frontend is on http://localhost:5173/
you backend is on http://localhost:5174

then your frontend can not access data from backend unless cors policy is resolved.

1. install cors in your backend to allow specific domains.

npm install cors

2.  Allow all request in backend.

import cors from 'cors';
app.use(cors());

or

app.use(cors({
  origin: ['https://your-frontend-domain.com']
}));




==> 

url: http://localhost:3000/products/1
method: delete

error: 
{
    "error": "Product not found"
}

success:
{
    "message": "Product deleted",
    "product": {
        "id": 1,
        "name": "product1",
        "description": "desription goes here",
        "price": "$100.00"
    }
}


==> 

url: http://localhost:3000/products/1
method: delete

error: 
{
    "error": "Product not found"
}

success:
{
    "message": "Product deleted",
    "product": {
        "id": 1,
        "name": "product1",
        "description": "desription goes here",
        "price": "$100.00"
    }
}

==> 

url: http://localhost:3000/products/
method: post

payload:
{
    "name": "Updated Product Name",
    "description": "Updated description of the product",
    "price": 2999
}


response:

{
    "id": 1,
    "name": "Updated Product Name",
    "description": "Updated description of the product",
    "price": 2999
}


==> 

url: http://localhost:3000/products/1
method: put

payload:
{
    "name": "Updated Product Name",
    "description": "Updated description of the product",
    "price": 2999
}

error:
{
    "error": "Product not found"
}

response:

{
    "id": 1,
    "name": "Updated Product Name",
    "description": "Updated description of the product",
    "price": 2999
}


=================



=================================================

install redis from this link:

https://redis.io/docs/latest/operate/oss_and_stack/install/archive/install-redis/install-redis-on-linux/



sudo service redis-server status

sudo service redis-server start

sudo service redis-server stop


queue.js

const Queue = require("bull");

// Create a new queue
const emailQueue = new Queue("email-queue", {
  redis: { host: "127.0.0.1", port: 6379 }
});

// Producer - add jobs to queue
const sendEmail = async (data) => {
  await emailQueue.add(data, {
    attempts: 3, // retry 3 times
    backoff: 5000 // wait 5 sec before retry
  });
  console.log("Job added:", data);
};

// Consumer - process jobs
emailQueue.process(async (job) => {
  console.log(`Processing email to: ${job.data.to}`);
  // Simulate email sending
  await new Promise(resolve => setTimeout(resolve, 2000));
  console.log("Email sent successfully!");
});

// Example usage
sendEmail({ to: "user@example.com", subject: "Welcome!", body: "Hello World" });


========================credentials=========================



========================credentials=========================


